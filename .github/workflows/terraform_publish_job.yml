name: "Terraform"

on:  
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TF_CLOUD_ORGANIZATION: "davinov"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "ingresso_func_incluir_cadastro_filme"
  CONFIG_DIRECTORY: "./aws-ec2-terraform"
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: IncluirCadastroFilmeFunction

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          
      - name: Install Amazon.Lambda.Tools
        run: dotnet tool install -g Amazon.Lambda.Tools
        
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build
        run: dotnet build --no-restore --configuration Release
      
      - name: Test
        run: dotnet test --verbosity normal
        
      # aqui vocÃª define o pacote que ira subir para AWS informe a pasta do projeto onde se encontra o arquivo .csproj
      - name: Deploy to Lambda
        working-directory: ./src/IncluirCadastroFilmeFunction/
        run: dotnet lambda package IncluirCadastroFilmeFunction.zip

      - name: Upload Lambda artifact
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: IncluirCadastroFilmeFunction
          path: ./src/IncluirCadastroFilmeFunction/IncluirCadastroFilmeFunction.zip
  
  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    
      - uses: actions/checkout@v4
           
      - name: Download Lambda artifact
        uses: actions/download-artifact@v3
        with:
          name: IncluirCadastroFilmeFunction

      - name: List Files and folders in Working Directory
        run: ls -s
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve
          